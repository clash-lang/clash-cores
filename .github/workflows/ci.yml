name: CI

# Trigger the workflow on all pull requests and pushes/merges to main branch
on:
  pull_request:
  push:
  #   branches: [main]
  # workflow_dispatch:


concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  stack:
    name: Stack tests
    runs-on: self-hosted
    strategy:
      matrix:
        ghc-version: [ "9.8.4", "9.10.1" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Stack / GHC
        uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc-version }}
          cabal-version: '3.14.1.1'
          enable-stack: true
          stack-version: 'latest'

      # Ask Stack to use system GHC instead of installing its own copy
      - name: Use system GHC
        run: |
          stack config set system-ghc --global true

      - name: Patch cabal.project file
        run: |
          sed 's/1.8/master/' -i cabal.project

      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: ~/.stack
          key: ${{ runner.os }}-ghc-${{ matrix.ghc }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ghc-${{ matrix.ghc }}-${{ github.ref }}-${{ github.sha }}
            ${{ runner.os }}-ghc-${{ matrix.ghc }}-${{ github.ref }}-
            ${{ runner.os }}-ghc-${{ matrix.ghc }}-

      - name: Install dependencies
        run: stack build --test --only-dependencies --nix

      # Cache dependencies already at this point, so that we do not have to
      # rebuild them should the subsequent steps fail
      - name: Save cached dependencies
        uses: actions/cache/save@v4
        # Trying to save over an existing cache gives distracting
        # "Warning: Cache save failed." since they are immutable
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        with:
          path: ~/.stack
          key: ${{ runner.os }}-ghc-${{ matrix.ghc }}-${{ github.ref }}-${{ github.sha }}

      - name: Build with Stack
        run: stack build --nix

  cabal-nixified:
    name: Cabal via Nix develop & Copy Tests
    runs-on: self-hosted
    needs: devshells
    strategy:
      matrix:
        ghc-version: [ "ghc9101" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build HDL tests
        run: |
          nix develop .#${{ matrix.ghc-version }}-minimal \
            --command bash -c "bash .github/scripts/build.sh"

      - name: Run HDL tests
        run: |
          nix develop .#${{ matrix.ghc-version }}-minimal \
            --command bash -c "bash .github/scripts/hdl-tests.sh"

  nix:
    name: Nix/Cabal tests
    runs-on: self-hosted
    strategy:
      matrix:
        ghc-version: [ "ghc9101", "ghc982", "ghc964" ]
    steps:
        # There's no need to configure Nix, the dockerfile handling the GHA has it done for us!
        # If a dependencies are already cached, we can simply re-use them!

      - name: Checkout
        uses: actions/checkout@v4

      - name: Nix Build & Test
        run: |
          nix build .#${{ matrix.ghc-version }}

      - name: Push results to cache
        env:
          ATTIC_TOKEN: ${{ secrets.ATTIC_SECRET }}
        run: |
          attic login --set-default public http://192.168.102.136:9200/ "$ATTIC_TOKEN"
          attic push public $(nix path-info .#${{ matrix.ghc-version }})

  devshells:
    name: Nix build developer shells
    runs-on: self-hosted
    strategy:
      matrix:
        ghc-version: [ "ghc9101", "ghc982", "ghc964" ]
    steps:
        # There's no need to configure Nix, the dockerfile handling the GHA has it done for us!
        # If a dependencies are already cached, we can simply re-use them!

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build devshell
        run: |
          # Since the server is x86_64-linux, we can only build the devshell
          # for that
          nix build .#devShells.x86_64-linux.${{ matrix.ghc-version }}-full

      - name: Push devshell to cache
        env:
          ATTIC_TOKEN: ${{ secrets.ATTIC_SECRET }}
        run: |
          attic login --set-default public http://192.168.102.136:9200/ "$ATTIC_TOKEN"
          attic push public $(nix path-info .#devShells.x86_64-linux.${{ matrix.ghc-version }}-full)
    

  # Mandatory check on GitHub
  all:
    name: All jobs finished
    if: always()
    needs: [
        stack,
        nix,
        cabal-nixified,
      ]
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check dependencies for failures
        run: |
          # Test all dependencies for success/failure
          set -x
          success="${{ contains(needs.*.result, 'success') }}"
          fail="${{ contains(needs.*.result, 'failure') }}"
          set +x

          # Test whether success/fail variables contain sane values
          if [[ "${success}" != "true" && "${success}" != "false" ]]; then exit 1; fi
          if [[ "${fail}"    != "true" && "${fail}"    != "false" ]]; then exit 1; fi

          # We want to fail if one or more dependencies fail. For safety, we introduce
          # a second check: if no dependencies succeeded something weird is going on.
          if [[ "${fail}" == "true" || "${success}" == "false" ]]; then
            echo "One or more dependency failed, or no dependency succeeded."
            exit 1
          fi

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install python3-yaml

      - name: Check that the 'all' job depends on all other jobs
        run: |
          .github/scripts/all_check.py

